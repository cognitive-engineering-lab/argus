// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import { FromEnv } from '../../../types';
import { Normalize } from '../../../types';
import { TraitId } from '../../../types';
import { TraitRef } from '../../../types';
import { Ty } from '../../../types';
import { WellFormed } from '../../../types';
import { WhereClause } from '../../../types';

export type DomainGoal = { Holds: WhereClause } | { WellFormed: WellFormed } | { FromEnv: FromEnv } | { Normalize: Normalize } | { IsLocal: Ty } | { IsUpstream: Ty } | { IsFullyVisible: Ty } | { LocalImplAllowed: TraitRef } | "Compatible" | { DownstreamType: Ty } | "Reveal" | { ObjectSafe: TraitId };