Given the following external type definitions, I would like for you to generate the appropriate local type definitions that correctly use the serde remote derive feature. All types should implement Serialize properly. I may accidentally include the same external type definition twice, if this is the case, only generate one corresponding local type. If you are missing an external type, please tell me before generating any of the local definitions. Do the task in full, even though it may be risky, and give me the code only.

```
pub struct Predicate<'tcx>(Interned<'tcx, WithCachedTypeInfo<Binder<'tcx, PredicateKind<'tcx>>>>);

pub struct Interned<'a, T>(pub &'a T, pub PrivateZst);

pub struct PrivateZst;

pub struct WithCachedTypeInfo<T> {
    pub internee: T,
    pub stable_hash: Fingerprint,
    pub flags: TypeFlags,
    pub outer_exclusive_binder: DebruijnIndex,
}

pub struct Fingerprint(u64, u64);

pub struct TypeFlags {
    bits: u32,
}

pub struct DebruijnIndex {
    pub(crate) private: u32,
}

pub struct Binder<'tcx, T> {
    value: T,
    bound_vars: &'tcx List<BoundVariableKind>,
}

pub struct List<T> {
    len: usize,
    data: [T; 0],
    opaque: OpaqueListContents,
}

pub enum BoundVariableKind {
    Ty(BoundTyKind),
    Region(BoundRegionKind),
    Const,
}

pub enum BoundTyKind {
    Anon,
    Param(DefId, Symbol),
}

pub struct DefId {
    pub index: DefIndex,
    pub krate: CrateNum,
}

pub struct DefIndex {
    private: u32,
}

pub struct CrateNum {
    private: u32,
}

pub struct Symbol(SymbolIndex);


struct SymbolIndex {
    private: u32,
}

pub enum BoundRegionKind {
    BrAnon,
    BrNamed(DefId, Symbol),
    BrEnv,
}

pub type PredicateKind<'tcx> = PredicateKind<TyCtxt<'tcx>>;


enum PredicateKind<'tcx> {
    Clause(ClauseKind<TyCtxt<'tcx>>),
    ObjectSafe(DefId),
    Subtype(SubtypePredicate<'tcx>),
    Coerce(CoercePredicate<'tcx>),
    ConstEquate(Const<'tcx>, Const<'tcx>),
    Ambiguous,
    AliasRelate(Term<'tcx>, Term<'tcx>, AliasRelationDirection),
}

pub enum ClauseKind<I: Interner> {
    Trait(I::TraitPredicate),
    RegionOutlives(I::RegionOutlivesPredicate),
    TypeOutlives(I::TypeOutlivesPredicate),
    Projection(I::ProjectionPredicate),
    ConstArgHasType(I::Const, I::Ty),
    WellFormed(I::GenericArg),
    ConstEvaluatable(I::Const),
}

pub trait Interner: Sized {
    type DefId: Clone + Debug + Hash + Ord;
    type AdtDef: Clone + Debug + Hash + Ord;
    type GenericArgs: Clone + DebugWithInfcx<Self> + Hash + Ord + IntoIterator<Item = Self::GenericArg>;
    type GenericArg: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type Term: Clone + Debug + Hash + Ord;
    type Binder<T>;
    type TypeAndMut: Clone + Debug + Hash + Ord;
    type CanonicalVars: Clone + Debug + Hash + Eq;
    type Ty: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type Tys: Clone + Debug + Hash + Ord + IntoIterator<Item = Self::Ty>;
    type AliasTy: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type ParamTy: Clone + Debug + Hash + Ord;
    type BoundTy: Clone + Debug + Hash + Ord;
    type PlaceholderTy: Clone + Debug + Hash + Ord + Placeholder;
    type ErrorGuaranteed: Clone + Debug + Hash + Ord;
    type BoundExistentialPredicates: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type PolyFnSig: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type AllocId: Clone + Debug + Hash + Ord;
    type Const: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type AliasConst: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type PlaceholderConst: Clone + Debug + Hash + Ord + Placeholder;
    type ParamConst: Clone + Debug + Hash + Ord;
    type BoundConst: Clone + Debug + Hash + Ord;
    type ValueConst: Clone + Debug + Hash + Ord;
    type ExprConst: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type Region: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type EarlyParamRegion: Clone + Debug + Hash + Ord;
    type BoundRegion: Clone + Debug + Hash + Ord;
    type LateParamRegion: Clone + Debug + Hash + Ord;
    type InferRegion: Clone + DebugWithInfcx<Self> + Hash + Ord;
    type PlaceholderRegion: Clone + Debug + Hash + Ord + Placeholder;
    type Predicate: Clone + Debug + Hash + Eq;
    type TraitPredicate: Clone + Debug + Hash + Eq;
    type RegionOutlivesPredicate: Clone + Debug + Hash + Eq;
    type TypeOutlivesPredicate: Clone + Debug + Hash + Eq;
    type ProjectionPredicate: Clone + Debug + Hash + Eq;
    type SubtypePredicate: Clone + Debug + Hash + Eq;
    type CoercePredicate: Clone + Debug + Hash + Eq;
    type ClosureKind: Clone + Debug + Hash + Eq;
}

impl<'tcx> Interner for TyCtxt<'tcx> {
    type DefId = DefId;
    type AdtDef = ty::AdtDef<'tcx>;
    type GenericArgs = ty::GenericArgsRef<'tcx>;
    type GenericArg = ty::GenericArg<'tcx>;
    type Term = ty::Term<'tcx>;

    type Binder<T> = Binder<'tcx, T>;
    type TypeAndMut = TypeAndMut<'tcx>;
    type CanonicalVars = CanonicalVarInfos<'tcx>;

    type Ty = Ty<'tcx>;
    type Tys = &'tcx List<Ty<'tcx>>;
    type AliasTy = ty::AliasTy<'tcx>;
    type ParamTy = ParamTy;
    type BoundTy = ty::BoundTy;
    type PlaceholderTy = ty::PlaceholderType;

    type ErrorGuaranteed = ErrorGuaranteed;
    type BoundExistentialPredicates = &'tcx List<PolyExistentialPredicate<'tcx>>;
    type PolyFnSig = PolyFnSig<'tcx>;
    type AllocId = crate::mir::interpret::AllocId;

    type Const = ty::Const<'tcx>;
    type AliasConst = ty::UnevaluatedConst<'tcx>;
    type PlaceholderConst = ty::PlaceholderConst;
    type ParamConst = ty::ParamConst;
    type BoundConst = ty::BoundVar;
    type ValueConst = ty::ValTree<'tcx>;
    type ExprConst = ty::Expr<'tcx>;

    type Region = Region<'tcx>;
    type EarlyParamRegion = ty::EarlyParamRegion;
    type BoundRegion = ty::BoundRegion;
    type LateParamRegion = ty::LateParamRegion;
    type InferRegion = ty::RegionVid;
    type PlaceholderRegion = ty::PlaceholderRegion;

    type Predicate = Predicate<'tcx>;
    type TraitPredicate = ty::TraitPredicate<'tcx>;
    type RegionOutlivesPredicate = ty::RegionOutlivesPredicate<'tcx>;
    type TypeOutlivesPredicate = ty::TypeOutlivesPredicate<'tcx>;
    type ProjectionPredicate = ty::ProjectionPredicate<'tcx>;
    type SubtypePredicate = ty::SubtypePredicate<'tcx>;
    type CoercePredicate = ty::CoercePredicate<'tcx>;
    type ClosureKind = ty::ClosureKind;
}

pub struct SubtypePredicate<'tcx> {
    pub a_is_expected: bool,
    pub a: Ty<'tcx>,
    pub b: Ty<'tcx>,
}

pub struct Ty<'tcx>(Interned<'tcx, WithCachedTypeInfo<TyKind<'tcx>>>);


pub type TyKind<'tcx> = TyKind<TyCtxt<'tcx>>;


enum TyKind<'tcx> {
    Bool,
    Char,
    Int(IntTy),
    Uint(UintTy),
    Float(FloatTy),
    Adt(AdtDef<'tcx>, &'tcx List<GenericArg<'tcx>>),
    Foreign(DefId),
    Str,
    Array(Ty<'tcx>, Const<'tcx>),
    Slice(Ty<'tcx>),
    RawPtr(TypeAndMut<'tcx>),
    Ref(Region<'tcx>, Ty<'tcx>, Mutability),
    FnDef(DefId, &'tcx List<GenericArg<'tcx>>),
    FnPtr(Binder<'tcx, FnSig<'tcx>>),
    Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, Region<'tcx>, DynKind),
    Closure(DefId, &'tcx List<GenericArg<'tcx>>),
    Coroutine(DefId, &'tcx List<GenericArg<'tcx>>, Movability),
    CoroutineWitness(DefId, &'tcx List<GenericArg<'tcx>>),
    Never,
    Tuple(&'tcx List<Ty<'tcx>>),
    Alias(AliasKind, AliasTy<'tcx>),
    Param(ParamTy),
    Bound(DebruijnIndex, BoundTy),
    Placeholder(Placeholder<BoundTy>),
    Infer(InferTy),
    Error(ErrorGuaranteed),
}

pub enum IntTy {
    Isize,
    I8,
    I16,
    I32,
    I64,
    I128,
}

pub enum UintTy {
    Usize,
    U8,
    U16,
    U32,
    U64,
    U128,
}

pub enum FloatTy {
    F32,
    F64,
}

pub struct AdtDef<'tcx>(pub Interned<'tcx, AdtDefData>);


pub struct AdtDefData {
    pub did: DefId,
    variants: IndexVec<VariantIdx, VariantDef>,
    flags: AdtFlags,
    repr: ReprOptions,
}

pub struct GenericArg<'tcx> {
    ptr: NonZeroUsize,
    marker: PhantomData<(Ty<'tcx>, Region<'tcx>, Const<'tcx>)>,
}

pub struct TypeAndMut<'tcx> {
    pub ty: Ty<'tcx>,
    pub mutbl: Mutability,
}

pub enum Mutability {
    Not,
    Mut,
}

pub struct Region<'tcx>(pub Interned<'tcx, RegionKind<'tcx>>);


pub type RegionKind<'tcx> = RegionKind<TyCtxt<'tcx>>;


enum RegionKind<'tcx> {
    ReEarlyParam(EarlyParamRegion),
    ReBound(DebruijnIndex, BoundRegion),
    ReLateParam(LateParamRegion),
    ReStatic,
    ReVar(RegionVid),
    RePlaceholder(Placeholder<BoundRegion>),
    ReErased,
    ReError(ErrorGuaranteed),
}

pub struct EarlyParamRegion {
    pub def_id: DefId,
    pub index: u32,
    pub name: Symbol,
}

pub struct BoundRegion {
    pub var: BoundVar,
    pub kind: BoundRegionKind,
}

pub enum BoundRegionKind {
    BrAnon,
    BrNamed(DefId, Symbol),
    BrEnv,
}

pub struct LateParamRegion {
    pub scope: DefId,
    pub bound_region: BoundRegionKind,
}

pub struct RegionVid {
    private: u32,
}

pub struct ErrorGuaranteed(pub(crate) ());


pub enum Mutability {
    Not,
    Mut,
}

pub struct FnSig<'tcx> {
    pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    pub c_variadic: bool,
    pub unsafety: Unsafety,
    pub abi: Abi,
}

pub enum Unsafety {
    Unsafe,
    Normal,
}

pub enum Abi {
    Rust,
    C {
        unwind: bool,
    },
    Cdecl {
        unwind: bool,
    },
    Stdcall {
        unwind: bool,
    },
    Fastcall {
        unwind: bool,
    },
    Vectorcall {
        unwind: bool,
    },
    Thiscall {
        unwind: bool,
    },
    Aapcs {
        unwind: bool,
    },
    Win64 {
        unwind: bool,
    },
    SysV64 {
        unwind: bool,
    },
    PtxKernel,
    Msp430Interrupt,
    X86Interrupt,
    AmdGpuKernel,
    EfiApi,
    AvrInterrupt,
    AvrNonBlockingInterrupt,
    CCmseNonSecureCall,
    Wasm,
    System {
        unwind: bool,
    },
    RustIntrinsic,
    RustCall,
    PlatformIntrinsic,
    Unadjusted,
    RustCold,
    RiscvInterruptM,
    RiscvInterruptS,
}

pub enum ExistentialPredicate<'tcx> {
    Trait(ExistentialTraitRef<'tcx>),
    Projection(ExistentialProjection<'tcx>),
    AutoTrait(DefId),
}

pub struct ExistentialTraitRef<'tcx> {
    pub def_id: DefId,
    pub args: GenericArgsRef<'tcx>,
}

pub struct ExistentialProjection<'tcx> {
    pub def_id: DefId,
    pub args: GenericArgsRef<'tcx>,
    pub term: Term<'tcx>,
}

pub struct Term<'tcx> {
    ptr: NonZeroUsize,
    marker: PhantomData<(Ty<'tcx>, Const<'tcx>)>,
}

pub enum DynKind {
    Dyn,
    DynStar,
}

pub enum Movability {
    Static,
    Movable,
}

pub enum AliasKind {
    Projection,
    Inherent,
    Opaque,
    Weak,
}

pub struct AliasTy<'tcx> {
    pub args: GenericArgsRef<'tcx>,
    pub def_id: DefId,
    _use_alias_ty_new_instead: (),
}

pub struct ParamTy {
    pub index: u32,
    pub name: Symbol,
}

pub struct BoundTy {
    pub var: BoundVar,
    pub kind: BoundTyKind,
}

pub enum BoundTyKind {
    Anon,
    Param(DefId, Symbol),
}

pub struct BoundVar {
    pub(crate) private: u32,
}

pub struct BoundTy {
    pub var: BoundVar,
    pub kind: BoundTyKind,
}

pub struct Placeholder<T> {
    pub universe: UniverseIndex,
    pub bound: T,
}

pub struct UniverseIndex {
    pub(crate) private: u32,
}

pub enum InferTy {
    TyVar(TyVid),
    IntVar(IntVid),
    FloatVar(FloatVid),
    FreshTy(u32),
    FreshIntTy(u32),
    FreshFloatTy(u32),
}

pub struct TyVid {
    private: u32,
}

pub struct IntVid {
    private: u32,
}

pub struct FloatVid {
    private: u32,
}

pub struct CoercePredicate<'tcx> {
    pub a: Ty<'tcx>,
    pub b: Ty<'tcx>,
}

pub struct Const<'tcx>(pub(super) Interned<'tcx, WithCachedTypeInfo<ConstData<'tcx>>>);

pub struct ConstData<'tcx> {
    pub ty: Ty<'tcx>,
    pub kind: ConstKind<'tcx>,
}

pub type ConstKind<'tcx> = ConstKind<TyCtxt<'tcx>>;


enum ConstKind<'tcx> {
    Param(ParamConst),
    Infer(InferConst),
    Bound(DebruijnIndex, BoundVar),
    Placeholder(Placeholder<BoundVar>),
    Unevaluated(UnevaluatedConst<'tcx>),
    Value(ValTree<'tcx>),
    Error(ErrorGuaranteed),
    Expr(Expr<'tcx>),
}

pub enum InferConst {
    Var(ConstVid),
    EffectVar(EffectVid),
    Fresh(u32),
}

pub struct ConstVid {
    private: u32,
}

pub struct EffectVid {
    private: u32,
}

pub struct UnevaluatedConst<'tcx> {
    pub def: DefId,
    pub args: GenericArgsRef<'tcx>,
}

pub enum ValTree<'tcx> {
    Leaf(ScalarInt),
    Branch(&'tcx [ValTree<'tcx>]),
}

pub struct ScalarInt {
    data: u128,
    size: NonZeroU8,
}

pub enum Expr<'tcx> {
    Binop(BinOp, Const<'tcx>, Const<'tcx>),
    UnOp(UnOp, Const<'tcx>),
    FunctionCall(Const<'tcx>, &'tcx List<Const<'tcx>>),
    Cast(CastKind, Const<'tcx>, Ty<'tcx>),
}

pub enum BinOp {
    Add,
    AddUnchecked,
    Sub,
    SubUnchecked,
    Mul,
    MulUnchecked,
    Div,
    Rem,
    BitXor,
    BitAnd,
    BitOr,
    Shl,
    ShlUnchecked,
    Shr,
    ShrUnchecked,
    Eq,
    Lt,
    Le,
    Ne,
    Ge,
    Gt,
    Offset,
}

pub enum UnOp {
    Not,
    Neg,
}

pub enum CastKind {
    As,
    Use,
}

pub struct ParamConst {
    pub index: u32,
    pub name: Symbol,
}

pub enum InferConst {
    Var(ConstVid),
    EffectVar(EffectVid),
    Fresh(u32),
}

pub struct Term<'tcx> {
    ptr: NonZeroUsize,
    marker: PhantomData<(Ty<'tcx>, Const<'tcx>)>,
}

pub enum AliasRelationDirection {
    Equate,
    Subtype,
}
```
